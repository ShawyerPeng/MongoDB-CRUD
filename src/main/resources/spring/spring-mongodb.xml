<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:mongo="http://www.springframework.org/schema/data/mongo"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.2.xsd
	   http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.2.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.2.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.2.xsd
       http://www.springframework.org/schema/data/repository http://www.springframework.org/schema/data/repository/spring-repository-1.5.xsd
       http://www.springframework.org/schema/data/mongo http://www.springframework.org/schema/data/mongo/spring-mongo.xsd">

    <context:component-scan base-package="service">
        <context:include-filter type="annotation" expression="org.springframework.stereotype.Repository"/>
    </context:component-scan>

    <!-- 需要密码验证的配置方式 -->
    <mongo:mongo-client id="mongoClient" host="${mongo.host}" port="${mongo.port}">
        <!--credentials="${mongo.username}:${mongo.password}@${mongo.db}">-->
        <!--<mongo:client-options-->
        <!--connections-per-host="${mongo.connectionsPerHost}"-->
        <!--min-connections-per-host="${mongo.minConnectionsPerHost}"-->
        <!--max-connection-idle-time="${mongo.maxConnectionIdleTime}"-->
        <!--max-connection-life-time="${mongo.maxConnectionLifeTime}"-->
        <!--threads-allowed-to-block-for-connection-multiplier="${mongo.threadsAllowedToBlockForConnectionMultiplier}"-->
        <!--connect-timeout="${mongo.connectTimeout}"-->
        <!--max-wait-time="${mongo.maxWaitTime}"-->
        <!--socket-keep-alive="${mongo.socketKeepAlive}"-->
        <!--socket-timeout="${mongo.socketTimeout}"-->
        <!--heartbeat-socket-timeout="${mongo.heartbeatSocketTimeout}"-->
        <!--heartbeat-connect-timeout="${mongo.heartbeatConnectTimeout}"-->
        <!--heartbeat-frequency="${mongo.heartbeatFrequency}"-->
        <!--min-heartbeat-frequency="${mongo.minHeartbeatFrequency}"-->
        <!--description="${mongo.description}"-->
        <!--write-concern="NORMAL"/>-->
    </mongo:mongo-client>

    <bean id="mongoDbFactory" class="org.springframework.data.mongodb.core.SimpleMongoDbFactory">
        <constructor-arg ref="mongoClient"/>
        <constructor-arg value="${mongo.db}"/>
    </bean>
    <!-- 如果没有创建数据库，就会默认创建数据库 username="root" password="root" -->
    <mongo:db-factory id="mongoDbFactory" dbname="${mongo.defaultDbName}" mongo-ref="mongoClient"/>

    <!-- Spring提供的mongodb操作模板，mongodb的主要操作对象，所有对mongodb的增删改查的操作都是通过它完成设定我们的 mongoDbFactory对象 -->
    <mongo:template id="mongoTemplate" db-factory-ref="mongoDbFactory" converter-ref="mappingMongoConverter"
                    write-concern="NORMAL"/>

    <!--MongoDB GridFS Template 支持，操作mongodb存放的文件-->
    <bean id="mappingContext" class="org.springframework.data.mongodb.core.mapping.MongoMappingContext"/>
    <bean id="defaultMongoTypeMapper" class="org.springframework.data.mongodb.core.convert.DefaultMongoTypeMapper">
        <constructor-arg name="typeKey">
            <null/>
        </constructor-arg>
    </bean>
    <mongo:mapping-converter id="mappingMongoConverter" db-factory-ref="mongoDbFactory"
                             mapping-context-ref="mappingContext" type-mapper-ref="defaultMongoTypeMapper"
                             base-package="dao"/>
    <mongo:gridFsTemplate id="gridFsTemplcate" db-factory-ref="mongoDbFactory" converter-ref="mappingMongoConverter"/>

    <!--&lt;!&ndash;mongodb bean 的仓库目录，会自动扫描扩展了 MongoRepository 接口的接口进行注入。&ndash;&gt;-->
    <!--<mongo:repositories base-package="repository" />-->

    <!--激活注解-->
    <bean class="org.springframework.context.annotation.CommonAnnotationBeanPostProcessor"/>

</beans>